#!/usr/bin/env python
# coding: utf-8

# In[1]:


# Importing impotant libraries
from sklearn.datasets import load_boston
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')
import numpy as np
import pandas as pd


# # Dataset link :
# Url = https://raw.githubusercontent.com/edyoda/data-science-complete-tutorial/master/Data/house_rental_data.csv.txt

# In[2]:


df = pd.read_csv('https://raw.githubusercontent.com/edyoda/data-science-complete-tutorial/master/Data/house_rental_data.csv.txt')

df.head()


# In[3]:


del df['Unnamed: 0']


# In[4]:


df.head()


# In[5]:


df.dtypes


# # visualization of the data
# 

# In[6]:


# scatter plot of 'Sqft' & 'Price'

x = df['Sqft']
y = df['Price']

# Set the fugure size in inches
plt.figure(figsize = (8,6))

plt.scatter(x, y, label = 'Points', c = 'red')
plt.xlabel('Sqft')
plt.ylabel('Price')
plt.title('Scatter Plot')
plt.legend()
plt.show()


# In[7]:


import seaborn as sns
sns.barplot( x = 'Sqft',y = 'Price',data = df)


# # Manage data for training & testing

# In[8]:


df.head()


# In[9]:


columns = df.columns.tolist()
columns


# In[10]:


feature_data = df[columns]


# In[11]:


target_data = df.Price


# In[12]:


trainX,testX, trainY,testY = train_test_split(feature_data, target_data)


# In[13]:


print(x.shape)
print(y.shape)
print(trainX.shape)
print(testX.shape)
print(trainY.shape)
print(testY.shape)


# # Finding a better value of k

# In[14]:


df.dtypes


# In[15]:


# Performing Standard  Scaling
from sklearn.preprocessing import MinMaxScaler, StandardScaler
mms = StandardScaler()
df[['Sqft','Price']] = mms.fit_transform(df[['Sqft','Price']])
df.head()


# In[16]:


#  Optimum Number of Clusters
from sklearn.cluster import KMeans
from scipy.spatial.distance import cdist
distortions = []
inertias = []
mapping1 = {}
mapping2 = {}
K = range(1,15)

# Making a seperate array file having data for Sqft and Price
array1 = df['Sqft'].to_numpy() 
array2 = df['Price'].to_numpy()
array = np.array(list(zip(array1, array2))).reshape(len(array1), 2)

for k in K:
    #Building and Fitting the Model
    kmeanModel = KMeans(n_clusters = k)
    kmeanModel.fit(array)
    
    distortions.append(sum(np.min(cdist(array, kmeanModel.cluster_centers_,'euclidean'), axis = 1)) / array.shape[0])
    
    inertias.append(kmeanModel.inertia_)
    
    mapping1[k] = sum(np.min(cdist(array, kmeanModel.cluster_centers_,'euclidean'), axis = 1)) / array.shape[0]
    
    mapping2[k] = kmeanModel.inertia_


# In[17]:


print(mapping1)
print(mapping2)


# In[18]:


# Plot using Distortion
for key, val in mapping1.items():
    print(str(key)+' : '+str(val))
    
# Plot code
plt.plot(K, distortions, 'bx-')
plt.xlabel('Values of k')
plt.ylabel('Distortions')
plt.title('The Elbow using Distortion')
plt.show()


# In[19]:


# Plot using Inertias
for key, val in mapping2.items():
    print(str(key)+' : '+str(val))
    
# Plot code
plt.plot(K, inertias, 'bx-')
plt.xlabel('Values of k')
plt.ylabel('Inertias')
plt.title('The Elbow using Inertias')
plt.show()


# # k = 4 is the optimal value of k.
